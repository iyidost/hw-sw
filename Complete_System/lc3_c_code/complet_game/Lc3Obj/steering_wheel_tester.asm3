.Orig x0500
INIT_CODE
LD R5, STACK_ADDR
ADD R6, R5, #0
LD R4, GLOBAL_DATA_POINTER
LD R7, GLOBAL_MAIN_POINTER
jsrr R7
HALT

LD R7, SERIAL_MONITOR_ADDR
jmp R7
GLOBAL_DATA_POINTER .FILL GLOBAL_DATA_START
GLOBAL_MAIN_POINTER .FILL main
STACK_ADDR .FILL xdfff
SERIAL_MONITOR_ADDR .FILL x0200
;;;;;;;;;;;;;;;;;;;;;;;;;;;;main;;;;;;;;;;;;;;;;;;;;;;;;;;;;
main
ADD R6, R6, #-2
STR R7, R6, #0
ADD R6, R6, #-1
STR R5, R6, #0
ADD R5, R6, #-1

ADD R6, R6, #-9
;<ld R7, L2_steering_wheel_tester	;GLOB:35>
ADD R7, R4, #4
LDR R7, R7, #31
;</ld>
str R7, R5, #0
;<ld R7, L2_steering_wheel_tester	;GLOB:35>
ADD R7, R4, #4
LDR R7, R7, #31
;</ld>
str R7, R5, #-1
;<ld R7, L2_steering_wheel_tester	;GLOB:35>
ADD R7, R4, #4
LDR R7, R7, #31
;</ld>
str R7, R5, #-6
;<ld R7, L2_steering_wheel_tester	;GLOB:35>
ADD R7, R4, #4
LDR R7, R7, #31
;</ld>
str R7, R5, #-2
;<ld R7, L2_steering_wheel_tester	;GLOB:35>
ADD R7, R4, #4
LDR R7, R7, #31
;</ld>
str R7, R5, #-7
;<ld R7, L3_steering_wheel_tester	;GLOB:33>
ADD R7, R4, #2
LDR R7, R7, #31
;</ld>
str R7, R5, #-5
;<ld R7, L3_steering_wheel_tester	;GLOB:33>
ADD R7, R4, #2
LDR R7, R7, #31
;</ld>
str R7, R5, #-3
;<ld R7, L4_steering_wheel_tester	;GLOB:32>
ADD R7, R4, #1
LDR R7, R7, #31
;</ld>
str R7, R5, #-4
;<ld R7, L5_steering_wheel_tester	;GLOB:31>
LDR R7, R4, #31
;</ld>
str R7, R5, #-8
;<ld R0, L7_steering_wheel_tester	;GLOB:9>
LDR R0, R4, #9
;</ld>
JMP R0
lc3_L6_steering_wheel_tester
lc3_L9_steering_wheel_tester
;<ld R7, L12_steering_wheel_tester	;GLOB:30>
LDR R7, R4, #30
;</ld>
ADD R6, R6, #-1
STR R7, R6, #0
;<ld R0, io_read	;GLOB:15>
LDR R0, R4, #15
;</ld>
jsrr R0
LDR R7, R6, #0
ADD R6, R6, #2
; Warning: ASGN+U/I/P
; WARNING: Unexpected node (1093) passed to emit2()
str R7, R5, #0
lc3_L10_steering_wheel_tester
ldr R7, R5, #0
;<ld R3, L13_steering_wheel_tester	;GLOB:29>
LDR R3, R4, #29
;</ld>
NOT R7, R7
ADD R7, R7, #1
ADD R7, R7, R3
BRnp L34
;<ld R7, L9_steering_wheel_tester	;GLOB:1>
LDR R7, R4, #1
;</ld>
jmp R7
L34
;<ld R7, L14_steering_wheel_tester	;GLOB:28>
LDR R7, R4, #28
;</ld>
ADD R6, R6, #-1
STR R7, R6, #0
;<ld R0, io_read	;GLOB:15>
LDR R0, R4, #15
;</ld>
jsrr R0
LDR R7, R6, #0
ADD R6, R6, #2
; Warning: ASGN+U/I/P
; WARNING: Unexpected node (1093) passed to emit2()
str R7, R5, #-1
ldr R7, R5, #-1
;<ld R3, L17_steering_wheel_tester	;GLOB:27>
LDR R3, R4, #27
;</ld>
NOT R7, R7
ADD R7, R7, #1
ADD R7, R7, R3
BRp L35
;<ld R7, L15_steering_wheel_tester	;GLOB:3>
LDR R7, R4, #3
;</ld>
jmp R7
L35
ldr R7, R5, #-1
;<ld R3, L18_steering_wheel_tester	;GLOB:26>
LDR R3, R4, #26
;</ld>
add R7, R7, R3
not R7,R7
add R7,R7,#1
str R7, R5, #-1
;<ld R0, L16_steering_wheel_tester	;GLOB:4>
LDR R0, R4, #4
;</ld>
JMP R0
lc3_L15_steering_wheel_tester
;<ld R7, L18_steering_wheel_tester	;GLOB:26>
LDR R7, R4, #26
;</ld>
ldr R3, R5, #-1
;<sub R7, R7, R3>
ADD R6, R6, #-1
STR R0, R6, #0
ADD R6, R6, #-1
STR R3, R6, #0
NOT R3, R3
ADD R3, R3, #1
ADD R0, R7, R3
LDR R3, R6, #0
ADD R6, R6, #1
ADD R7, R0, #0
LDR R0, R6, #0
ADD R6, R6, #1
;</sub>
str R7, R5, #-1
lc3_L16_steering_wheel_tester
ldr R7, R5, #-1
;<ld R3, L19_steering_wheel_tester	;GLOB:25>
LDR R3, R4, #25
;</ld>
div R7, R7, R3
str R7, R5, #-1
ldr R7, R5, #-1
;<ld R3, L20_steering_wheel_tester	;GLOB:24>
LDR R3, R4, #24
;</ld>
add R7, R7, R3
str R7, R5, #-1
ldr R7, R5, #-1
;<ld R3, L21_steering_wheel_tester	;GLOB:23>
LDR R3, R4, #23
;</ld>
add R7, R7, R3
str R7, R5, #-1
ldr R7, R5, #-1
ADD R6, R6, #-1
STR R7, R6, #0
;<ld R7, L22_steering_wheel_tester	;GLOB:22>
LDR R7, R4, #22
;</ld>
ADD R6, R6, #-1
STR R7, R6, #0
;<ld R0, io_write	;GLOB:14>
LDR R0, R4, #14
;</ld>
jsrr R0
ADD R6, R6, #3
ldr R7, R5, #-2
ldr R3, R5, #-4
NOT R7, R7
ADD R7, R7, #1
ADD R7, R7, R3
BRn L36
;<ld R7, L23_steering_wheel_tester	;GLOB:8>
LDR R7, R4, #8
;</ld>
jmp R7
L36
;<ld R7, L2_steering_wheel_tester	;GLOB:35>
ADD R7, R4, #4
LDR R7, R7, #31
;</ld>
str R7, R5, #-2
ldr R7, R5, #-3
;<ld R3, L25_steering_wheel_tester	;GLOB:34>
ADD R3, R4, #3
LDR R3, R3, #31
;</ld>
add R7, R7, R3
str R7, R5, #-3
ldr R7, R5, #-3
;<ld R3, L28_steering_wheel_tester	;GLOB:21>
LDR R3, R4, #21
;</ld>
NOT R7, R7
ADD R7, R7, #1
ADD R7, R7, R3
BRn L37
;<ld R7, L26_steering_wheel_tester	;GLOB:7>
LDR R7, R4, #7
;</ld>
jmp R7
L37
ldr R7, R5, #-1
str R7, R5, #-5
;<ld R7, L3_steering_wheel_tester	;GLOB:33>
ADD R7, R4, #2
LDR R7, R7, #31
;</ld>
str R7, R5, #-3
ldr R7, R5, #-4
;<ld R3, L31_steering_wheel_tester	;GLOB:20>
LDR R3, R4, #20
;</ld>
NOT R7, R7
ADD R7, R7, #1
ADD R7, R7, R3
BRn L38
;<ld R7, L29_steering_wheel_tester	;GLOB:5>
LDR R7, R4, #5
;</ld>
jmp R7
L38
ldr R7, R5, #-4
;<ld R3, L31_steering_wheel_tester	;GLOB:20>
LDR R3, R4, #20
;</ld>
;<sub R7, R7, R3>
ADD R6, R6, #-1
STR R0, R6, #0
ADD R6, R6, #-1
STR R3, R6, #0
NOT R3, R3
ADD R3, R3, #1
ADD R0, R7, R3
LDR R3, R6, #0
ADD R6, R6, #1
ADD R7, R0, #0
LDR R0, R6, #0
ADD R6, R6, #1
;</sub>
str R7, R5, #-4
;<ld R0, L30_steering_wheel_tester	;GLOB:6>
LDR R0, R4, #6
;</ld>
JMP R0
lc3_L29_steering_wheel_tester
;<ld R7, L4_steering_wheel_tester	;GLOB:32>
ADD R7, R4, #1
LDR R7, R7, #31
;</ld>
str R7, R5, #-4
lc3_L30_steering_wheel_tester
lc3_L26_steering_wheel_tester
ldr R7, R5, #-5
ADD R6, R6, #-1
STR R7, R6, #0
;<ld R7, L32_steering_wheel_tester	;GLOB:19>
LDR R7, R4, #19
;</ld>
ADD R6, R6, #-1
STR R7, R6, #0
;<ld R0, io_write	;GLOB:14>
LDR R0, R4, #14
;</ld>
jsrr R0
ADD R6, R6, #3
ldr R7, R5, #-3
ADD R6, R6, #-1
STR R7, R6, #0
;<ld R7, L33_steering_wheel_tester	;GLOB:18>
LDR R7, R4, #18
;</ld>
ADD R6, R6, #-1
STR R7, R6, #0
;<ld R0, io_write	;GLOB:14>
LDR R0, R4, #14
;</ld>
jsrr R0
ADD R6, R6, #3
lc3_L23_steering_wheel_tester
ldr R7, R5, #-2
;<ld R3, L25_steering_wheel_tester	;GLOB:34>
ADD R3, R4, #3
LDR R3, R3, #31
;</ld>
add R7, R7, R3
str R7, R5, #-2
lc3_L7_steering_wheel_tester
;<ld R0, L6_steering_wheel_tester	;GLOB:0>
LDR R0, R4, #0
;</ld>
JMP R0
;<ld R7, L17_steering_wheel_tester	;GLOB:27>
LDR R7, R4, #27
;</ld>
; WARNING: Unexpected node (1269) passed to emit2()
lc3_L1_steering_wheel_tester
STR R7, R5, #3
ADD R6, R5, #1
LDR R5, R6, #0
ADD R6, R6, #1
LDR R7, R6, #0
ADD R6, R6, #1
RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;kb_wait_read;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; short kb_wait_read();
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
kwr_KB_S .FILL xfe18
        
lc3_ps2kbd_wait_read
ADD R6, R6, #-1    ; reserve place for return val 

STR R7, R6, #-1    ; push R7
STR R0, R6, #-2    ; push R0

LD R7, kwr_KB_S
LDR R0, R7, #0     ; read status
BRzp #-2
        
LDR R7, R7, #2     ; read IO 
        
STR R7, R6, #0     ; put return val 

LDR R0, R6, #-2    ; pop R0
LDR R7, R6, #-1    ; pop R7
RET
;;;;;;;;;;;;;;;;;;;;;;;;;;;;stdout_wait_write;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; void stdout_wait_write(short val);
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
sww_STDOUT_S .FILL xfe04
        
lc3_stdout_wait_write
; I know that it is void function, but compiler is a bit stupid,
; and the caller will try to pop return value anyway
ADD R6, R6, #-1    ; reserve place for return val 

STR R7, R6, #-1    ; push R7
STR R0, R6, #-2    ; push R0

LD R7, sww_STDOUT_S
LDR R0, R7, #0     ; read status
BRzp #-2
        
LDR R0, R6, #1     ; get val    
STR R0, R7, #2     ; write IO 
        
STR R7, R6, #0     ; put return val 

LDR R0, R6, #-2    ; pop R0
LDR R7, R6, #-1    ; pop R7
RET
;;;;;;;;;;;;;;;;;;;;;;;;;;;;stdin_wait_read;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; short stdin_wait_read();
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
swr_STDIN_S .FILL xfe00
        
lc3_stdin_wait_read
ADD R6, R6, #-1    ; reserve place for return val 

STR R7, R6, #-1    ; push R7
STR R0, R6, #-2    ; pop R0

LD R7, swr_STDIN_S
LDR R0, R7, #0     ; read status
BRzp #-2
        
LDR R7, R7, #2     ; read IO 
        
STR R7, R6, #0     ; put return val 

LDR R0, R6, #-2    ; pop R0
LDR R7, R6, #-1    ; pop R7
RET
;;;;;;;;;;;;;;;;;;;;;;;;;;;;io_write;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; void io_write(unsigned short io_addr, short val);
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
lc3_io_write
; I know that it is void function, but compiler is a bit stupid,
; and the caller will try to pop return value anyway
ADD R6, R6, #-1    ; reserve place for return value 

STR R7, R6, #-1    ; push R7
STR R0, R6, #-2    ; push R0

LDR R7, R6, #1     ; get io_addr     
LDR R0, R6, #2     ; get val    
STR R0, R7, #0     ; write IO

LDR R0, R6, #-2    ; pop R0
LDR R7, R6, #-1    ; pop R7
RET
;;;;;;;;;;;;;;;;;;;;;;;;;;;;io_read;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; short io_read(unsigned short io_addr);
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
lc3_io_read
ADD R6, R6, #-1    ; reserve place for return val 

STR R7, R6, #-1    ; push R7

LDR R7, R6, #1     ; get io_addr
LDR R7, R7, #0     ; read IO
        
STR R7, R6, #0     ; put return val 

LDR R7, R6, #-1    ; pop R7
RET
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
;	void scanf(const char *format, ...) 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 

SCANF_PERCENT .FILL -37
SCANF_C .FILL -99
SCANF_D .FILL -100
SCANF_S .FILL -115 
SCANF_0 .FILL -48 
SCANF_9 .FILL -57  
SCANF_MINUS .FILL -45  
SCANF_BUF .BLKW 6
 
lc3_scanf 
ADD R6, R6, #-2 
STR R7, R6, #0 
 
ADD R6, R6, #-1		;save R5 = bp 
STR R5, R6, #0		 
ADD R5, R6, #-1 
 
ADD R6, R6, #-1		;save R4 = gp 
STR R4, R6, #0 
 
ADD R5, R5, #4		;cheating with the bp (no longer bp) 
LDR R4, R5, #0		;got addr of format string 
 

 

SCANF_LOOP	;outer loop, R0=tmp register for use with GETC 
			;R2 holds either cur letter of format string or 
			;current addr to store a char, dec, or string 
 
 
 
LDR R2, R4, #0 
 
ADD R2, R2, #0		;End of format string? (0x0000) 
BRz SCANF_DONE
 
LD R1, SCANF_PERCENT
ADD R0, R2, #0 
ADD R0, R0, R1		
BRnp SCANF_MATCHCHAR		 ;% not found
 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;% found! 
ADD R4, R4, #1		;R4 points to next char of format string 
LDR R2, R4, #0 
 
LD R1, SCANF_C
ADD R0, R2, #0		;next char = c? 
ADD R0, R0, R1 
BRnp SCANF_CHECKD    

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;%c found
ADD R5, R5, #1 
LDR R2, R5, #0		;R2 has addr for char to be read into 

GETC 
OUT
STR R0, R2, #0 
 
ADD R4, R4, #1 
BRnzp SCANF_LOOP
 
SCANF_CHECKD 
;is it %d? 
LD R1, SCANF_D
ADD R0, R2, #0 
ADD R0, R0, R1 
BRnp SCANF_STR  
 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;%d found
;consider using vars to store reg
;registers 0,1,2,3,7 available as tmp regs
 
 
ADD R6, R6, #-1		;saving current ptr into format string 
STR R4, R6, #0 
 
;ADD R6, R6, #-7		  ;making 7byte buffer for ascbin 
;ADD R4, R6, #0		  ;ptr into that buffer 
LEA R4, SCANF_BUF 
LD R2, SCANF_0
LD R1, SCANF_9
 
SCANF_SCANNUM 
 
GETC 
OUT
STR R0, R4, #0		;Reading and storing typed char 
 
ADD R0, R2, R0 
BRZP SCANF_CHECKEDLOWER 

LDR R0, R4, #0 
LD R7, SCANF_MINUS
ADD R0, R0, R7
BRz SCANF_CHECKEDLOWER
 
LEA R0, SCANF_BUF 
NOT R0, R0 
ADD R0, R0, #1 
ADD R0, R4, R0 
BRz SCANF_SCANNUM	  ;buffer is empty and wrong char, go to error?
 
ADD R4, R4, #-1 		;fixme: need to save this char
BRnzp SCANF_NUMDONE 
 
 
SCANF_CHECKEDLOWER 
 
LDR R0, R4, #0 
ADD R0, R1, R0 
BRNZ SCANF_CHECKEDUPPER 
 
LEA R0, SCANF_BUF 
NOT R0, R0 
ADD R0, R0, #1 
ADD R0, R4, R0 
BRz SCANF_SCANNUM	  ;buffer is empty and wrong char, go to error?
 
ADD R4, R4, #-1 		;fixme: need to save this char
BRnzp SCANF_NUMDONE 
 
SCANF_CHECKEDUPPER 
 
LEA R0, SCANF_BUF 
ADD R0, R0, #5 

NOT R0, R0 
ADD R0, R0, #1 
ADD R0, R4, R0 
BRz SCANF_NUMDONE	  ;buffer is full 
 
ADD R4, R4, #1 
BRnzp SCANF_SCANNUM 
 
SCANF_NUMDONE 
		 ;R4 points to last char entered in (ones digit) 
 
;ADD R7, R6, #0	 ;R7 points to the highest order digit 
LEA R7, SCANF_BUF 
LD R0, SCANF_MINUS
LD R1, SCANF_BUF
ADD R0, R0, R1
BRnp SCANF_NOTMINUS
ADD R7, R7, #1 	;fixme check for - -

SCANF_NOTMINUS
 
;STR R2, R6, #-1  ;psuedo stored -'0' on stack 
AND R2, R2, #0	 ;R2 acts as the acumulator 
 
SCANF_CALC 
 
LDR R0, R7, #0 
;LDR R1, R6, #-1 
LD R1, SCANF_0
ADD R0, R0, R1 
ADD R2, R2, R0 
 
NOT R1, R7 
ADD R1, R1, #1 
ADD R1, R4, R1 
BRz SCANF_CALCDONE 
			 ;R2 = 10*R2 
ADD R0, R2, #0 
AND R1, R1, #0 
ADD R1, R1, #9 ;R1 = counter 
 
SCANF_MULLOOP 
ADD R2, R2, R0 
ADD R1, R1, #-1 
BRnp SCANF_MULLOOP 
 
ADD R7, R7, #1 
BRnzp SCANF_CALC 
 
SCANF_CALCDONE			  

LD R0, SCANF_MINUS
LD R1, SCANF_BUF
ADD R0, R0, R1
BRnp SCANF_NOTNEG
NOT R2, R2
ADD R2, R2, #1

SCANF_NOTNEG
 
 
ADD R5, R5, #1 
LDR R0, R5, #0 		
 
STR R2, R0, #0	   ;store decimal number into address 
 
;ADD R6, R6, #7 
 
LDR R4, R6, #0 
ADD R6, R6, #1		;restoring current ptr into format string 
 
 
ADD R4, R4, #1	   ;point to next element of format string 
BRnzp SCANF_LOOP
 
 
SCANF_STR  
LD R1, SCANF_S
ADD R0, R2, #0 
ADD R0, R0, R1 
BRnp SCANF_ERROR
 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;%s found
ADD R6, R6, #-1		;saving current ptr into format string 
STR R4, R6, #0 
 
ADD R5, R5, #1		;getting starting addr of space for string to be read in 
LDR R4, R5, #0 
 
SCANSTRLOOP 
GETC 
OUT
STR R0, R4, #0		;Reading and storing typed char 
ADD R4, R4, #1 
 
ADD R0, R0, #-10	;End of string? Looking for CR (0x000A) 
BRnp SCANSTRLOOP   
 
SCANSTRDONE  
AND R0, R0, #0		;null terminate string 
STR R0, R4, #-1 
 
LDR R4, R6, #0		;restore r4 
ADD R6, R6, #1 
 
ADD R4, R4, #1 
BRnzp SCANF_LOOP
 
 
SCANF_MATCHCHAR 
ADD R4, R4, #1
GETC 
OUT
NOT R0, R0
ADD R0, R0, #1
ADD R0, R0, R2 
BRz SCANF_LOOP
 
SCANF_ERROR
SCANF_DONE
 
LDR R4, R6, #0		;restore R4 
ADD R6, R6, #1 
 
LDR R5, R6, #0		;restore bp 
ADD R6, R6, #1 
 
LDR R7, R6, #0		;restore ret addr 
ADD R6, R6, #1 
 
RET 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;	void printf(const char *format, ...)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

PRINTF_PERCENT .FILL -37
PRINTF_C .FILL -99
PRINTF_D .FILL -100
PRINTF_S .FILL -115
PRINTF_B .FILL -98
PRINTF_H .FILL -104
PRINTF_O .FILL -111
PRINTF_X .FILL -120
PRINTF_ASCII .FILL 48 		;postive ascii value of '0'
.FILL 49
.FILL 50
.FILL 51
.FILL 52
.FILL 53
.FILL 54
.FILL 55
.FILL 56
.FILL 57
.FILL x61    ; a			65        ;A
.FILL x62    ;  			66
.FILL x63    ;  			67
.FILL x64    ;  			68
.FILL x65    ;  			69
.FILL x66    ;  			70
PRINTF_MINUS .FILL 45  
PRINTF_BUF .BLKW 18
 

lc3_printf
ADD R6, R6, #-2
STR R7, R6, #0		;return address
ADD R6, R6, #-1
STR R5, R6, #0
ADD R5, R6, #-1

ADD R6, R6, #-1
STR R4, R6, #0

ADD R5, R5, #4		;cheating with the bp (no longer bp)
LDR R4, R5, #0		;got addr of format string


PRINTF_LOOP	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

LDR R0, R4, #0

ADD R0, R0, #0		;End of string? (0x0000)
BRz PRINTF_DONE

ADD R2, R0, #0
LD R1, PRINTF_PERCENT
ADD R2, R2, R1
BRnp PRINTF_CHAR		

ADD R4, R4, #1
LDR R0, R4, #0
;is it %h?      ; should ommit it because LC3 sizeof(int)==sizeof(short)
ADD R2, R0, #0
LD R3, PRINTF_H
ADD R2, R2, R3
BRnp PRINTF_CHECKCHAR

ADD R4, R4, #1  ; check next char
LDR R0, R4, #0

PRINTF_CHECKCHAR
;is it %c?
ADD R2, R0, #0
LD R3, PRINTF_C
ADD R2, R2, R3
BRnp PRINTF_CHECKSTR
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;%c
ADD R5, R5, #1
LDR R0, R5, #0

PRINTF_CHAR
OUT

ADD R4, R4, #1
BRnzp PRINTF_LOOP

PRINTF_CHECKSTR
;is it %s?
ADD R2, R0, #0
LD R7, PRINTF_S
ADD R2, R2, R7
BRnp PRINTF_CHECKDEC		

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;%s

ADD R5, R5, #1
LDR R0, R5, #0
PUTS

ADD R4, R4, #1
BRnzp PRINTF_LOOP

PRINTF_CHECKDEC
;is it %d?
ADD R2, R0, #0
LD R7, PRINTF_D
ADD R2, R2, R7
;BRnp PRINTF_ERROR
BRnp PRINTF_CHECKHEX

AND R2, R2, #0
ADD R2, R2, #-10		;going to divide by 10 by using sub loop
BRnzp PRINTF_NUM

PRINTF_CHECKHEX

ADD R2, R0, #0
LD R7, PRINTF_X
ADD R2, R2, R7
BRnp PRINTF_CHECKOCT

AND R2, R2, #0
ADD R2, R2, #-16		;going to divide by 10 by using sub loop
BRnzp PRINTF_NUM

PRINTF_CHECKOCT

ADD R2, R0, #0
LD R7, PRINTF_O
ADD R2, R2, R7
BRnp PRINTF_CHECKBIN

AND R2, R2, #0
ADD R2, R2, #-8		;going to divide by 10 by using sub loop
BRnzp PRINTF_NUM

PRINTF_CHECKBIN

ADD R2, R0, #0
LD R7, PRINTF_B
ADD R2, R2, R7
BRnp PRINTF_CHAR    ; Unknown character, print it verbatim 

AND R2, R2, #0
ADD R2, R2, #-2		;going to divide by 10 by using sub loop
;BRnzp PRINTF_NUM


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;%d
PRINTF_NUM

LEA R7, PRINTF_BUF
ADD R7, R7, #15 
ADD R7, R7, #1 

;AND R2, R2, #0
;ADD R2, R2, #-10		;going to divide by 10 by using sub loop

ADD R5, R5, #1			;acquire the binary number
LDR R0, R5, #0

ADD R0, R0, #0
BRzp PRINTF_DECPOS 

NOT R0, R0				;make num positive for sub loop
ADD R0, R0, #1

PRINTF_DECPOS

AND R3, R3, #0
ADD R3, R3, #-1

PRINTF_DIVLOOP
ADD R3, R3, #1			;num/10 
ADD R0, R0, R2			;R0 = num % 10 - 10
BRzp PRINTF_DIVLOOP

ADD R3, R3, #0
BRz PRINTF_LASTDIGIT

;LD R1, PRINTF_ASCII
;ADD R1, R1, R0
;NOT R2, R2
;ADD R1, R1, R2 
;ADD R1, R1, #1
;NOT R2, R2
;;;;;ADD R1, R1, #10
;STR R1, R7, #0
;ADD R7, R7, #-1			;stored ascii value of one digit

LEA R1, PRINTF_ASCII
ADD R1, R1, R0
NOT R2, R2
ADD R1, R1, R2 
ADD R1, R1, #1
NOT R2, R2
LDR R1, R1, #0
STR R1, R7, #0
ADD R7, R7, #-1			;stored ascii value of one digit

ADD R0, R3, #0			;num/10

BRnzp PRINTF_DECPOS

PRINTF_LASTDIGIT

;LD R1, PRINTF_ASCII
;ADD R1, R1, R0
;ADD R1, R1, #10
;STR R1, R7, #0

LEA R1, PRINTF_ASCII
ADD R1, R1, R0
NOT R2, R2
ADD R1, R1, R2 
ADD R1, R1, #1
NOT R2, R2
LDR R1, R1, #0
STR R1, R7, #0			;stored ascii value of highest order digit

LDR R0, R5, #0
ADD R0, R0, #0
BRzp PRINTF_DECSTRING

LD R0, PRINTF_MINUS		;num was negative
ADD R7, R7, #-1
STR R0, R7, #0			;stored ascii value negative sign

PRINTF_DECSTRING		;print the calculated string
ADD R0, R7, #0
PUTS

ADD R4, R4, #1
BRnzp PRINTF_LOOP

PRINTF_ERROR
PRINTF_DONE

LDR R4, R6, #0		;restore R4
ADD R6, R6, #1

LDR R5, R6, #0		;restore bp
ADD R6, R6, #1

LDR R7, R6, #0		;restore ret addr
ADD R6, R6, #1

RET

GLOBAL_DATA_START
L6_steering_wheel_tester .FILL lc3_L6_steering_wheel_tester
L9_steering_wheel_tester .FILL lc3_L9_steering_wheel_tester
L10_steering_wheel_tester .FILL lc3_L10_steering_wheel_tester
L15_steering_wheel_tester .FILL lc3_L15_steering_wheel_tester
L16_steering_wheel_tester .FILL lc3_L16_steering_wheel_tester
L29_steering_wheel_tester .FILL lc3_L29_steering_wheel_tester
L30_steering_wheel_tester .FILL lc3_L30_steering_wheel_tester
L26_steering_wheel_tester .FILL lc3_L26_steering_wheel_tester
L23_steering_wheel_tester .FILL lc3_L23_steering_wheel_tester
L7_steering_wheel_tester .FILL lc3_L7_steering_wheel_tester
L1_steering_wheel_tester .FILL lc3_L1_steering_wheel_tester
ps2kbd_wait_read .FILL lc3_ps2kbd_wait_read
stdout_wait_write .FILL lc3_stdout_wait_write
stdin_wait_read .FILL lc3_stdin_wait_read
io_write .FILL lc3_io_write
io_read .FILL lc3_io_read
scanf .FILL lc3_scanf
printf .FILL lc3_printf
L33_steering_wheel_tester .FILL #65056
L32_steering_wheel_tester .FILL #65054
L31_steering_wheel_tester .FILL #40
L28_steering_wheel_tester .FILL #384
L22_steering_wheel_tester .FILL #65052
L21_steering_wheel_tester .FILL #32
L20_steering_wheel_tester .FILL #255
L19_steering_wheel_tester .FILL #128
L18_steering_wheel_tester .FILL #32767
L17_steering_wheel_tester .FILL #0
L14_steering_wheel_tester .FILL #65050
L13_steering_wheel_tester .FILL #-32768
L12_steering_wheel_tester .FILL #65048
L5_steering_wheel_tester .FILL #200
L4_steering_wheel_tester .FILL #900
L3_steering_wheel_tester .FILL #0
L25_steering_wheel_tester .FILL #1
L2_steering_wheel_tester .FILL #0
.END
